import { ClassSerializerInterceptor, ValidationPipe } from '@nestjs/common';
import { NestFactory, Reflector } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';

import { AppModule } from './app.module';
import { GlobalExceptionFilter } from './common/filters/global-exception.filter';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Enable global validation pipe
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: false, // Cho ph√©p c√°c tr∆∞·ªùng kh√¥ng c√≥ trong DTO
      transform: true,
      skipMissingProperties: true, // B·ªè qua validation cho c√°c tr∆∞·ªùng kh√¥ng c√≥
    }),
  );

  // add /api prefix
  app.setGlobalPrefix('api');

  // Enable class-transformer serialization
  app.useGlobalInterceptors(new ClassSerializerInterceptor(app.get(Reflector)));

  // Enable global exception filter
  app.useGlobalFilters(new GlobalExceptionFilter());

  // Enable CORS
  app.enableCors({
    origin: '*',
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
    allowedHeaders: ['Content-Type', 'Authorization'],
  });

  // C·∫•u h√¨nh Swagger
  const config = new DocumentBuilder()
    .setTitle('H·ªá th·ªëng Qu·∫£n l√Ω Th∆∞ vi·ªán - API')
    .setDescription('API documentation for Library Management System')
    .setVersion('1.0')
    .addTag('Users', 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng')
    .addTag('Reader Types', 'Qu·∫£n l√Ω lo·∫°i ƒë·ªôc gi·∫£')
    .addTag('Readers', 'Qu·∫£n l√Ω ƒë·ªôc gi·∫£')
    .addTag('Categories', 'Qu·∫£n l√Ω th·ªÉ lo·∫°i')
    .addTag('Publishers', 'Qu·∫£n l√Ω nh√† xu·∫•t b·∫£n')
    .addTag('Authors', 'Qu·∫£n l√Ω t√°c gi·∫£')
    .addTag('Products', 'Qu·∫£n l√Ω s·∫£n ph·∫©m')
    .addTag('Ebooks', 'Qu·∫£n l√Ω ebook')
    .addTag('Physical Copies', 'Qu·∫£n l√Ω b·∫£n in')
    .addTag('Books', 'Qu·∫£n l√Ω s√°ch')
    .addBearerAuth() // Th√™m authentication n·∫øu c·∫ßn
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document, {
    swaggerOptions: {
      persistAuthorization: true,
    },
  });

  // L·∫•y port t·ª´ .env file, fallback v·ªÅ 3000 n·∫øu kh√¥ng c√≥
  const port = process.env.PORT || 3000;

  console.log(`üöÄ Application is running on port: ${port}`);
  console.log(
    `üìö Swagger documentation is available at: http://localhost:${port}/api`,
  );
  await app.listen(port);
}
bootstrap();
